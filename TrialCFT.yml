AWSTemplateFormatVersion: "2010-09-09"
Description: "AWS Glue job, Glue trigger, Glue workflow, Glue crawler, S3 buckets creation"
Resources:


  DatabaseYelp:
    Type: AWS::Glue::Database
    Properties:
      CatalogId: !Ref 'AWS::AccountId'
      DatabaseInput:
        Name: 'yelpdatabase'
        Description: "AWS Glue database creation"
  
  CrawlerYelpBusiness:
    Type: AWS::Glue::Crawler
    Properties:
      Name: "Yelpbusinesscrawler"
      Role: "LabRole"
      Description: "AWS Glue crawler to crawl yelp business data"
      DatabaseName: !Ref DatabaseYelp
      Targets:
        S3Targets:
          - Path: "<s3:://-bucket-pathof-business.json/>"   # change the path
      TablePrefix: "Cleanbusinessdata"
      SchemaChangePolicy:
        UpdateBehaviour: "UPDATE_IN_DATABASE"
        DeleteBehaviour: "LOG"
      Configuration: '{"Version":1.0}'


  CrawlerYelpUser:
    Type: AWS::Glue::Crawler
    Properties:
      Name: "YelpUsercrawler"
      Role: "LabRole"
      Description: "AWS Glue crawler to crawl yelp user data"
      DatabaseName: !Ref DatabaseYelp
      Targets:
        S3Targets:
          - Path: "<s3:://-bucket-pathof-user.json/>"     # change the path
      TablePrefix: "Cleanuserdata"
      SchemaChangePolicy:
        UpdateBehaviour: "UPDATE_IN_DATABASE"
        DeleteBehaviour: "LOG"
      Configuration: '{"Version":1.0}'    


  CrawlerYelpReviews:
    Type: AWS::Glue::Crawler
    Properties:
      Name: "Yelpreviescrawler"
      Role: "LabRole"
      Description: "AWS Glue crawler to crawl yelp reviews data"
      DatabaseName: !Ref DatabaseYelp
      Targets:
        S3Targets:
          - Path: "<s3:://-bucket-pathof-reviews.json/>"     # change the path
      TablePrefix: "Cleanreviewsdata"
      SchemaChangePolicy:
        UpdateBehaviour: "UPDATE_IN_DATABASE"
        DeleteBehaviour: "LOG"
      Configuration: '{"Version":1.0}'    


  CrawlerYelpTips:
    Type: AWS::Glue::Crawler
    Properties:
      Name: "Yelptipscrawler"
      Role: "LabRole"
      Description: "AWS Glue crawler to crawl yelp tips data"
      DatabaseName: !Ref DatabaseYelp
      Targets:
        S3Targets:
          - Path: "<s3:://-bucket-pathof-tips.json/>"     # change the path
      TablePrefix: "Cleantipsdata"
      SchemaChangePolicy:
        UpdateBehaviour: "UPDATE_IN_DATABASE"
        DeleteBehaviour: "LOG"
      Configuration: '{"Version":1.0}'    


  CrawlerYelpCheckin:
    Type: AWS::Glue::Crawler
    Properties:
      Name: "Yelpcheckincrawler"
      Role: "LabRole"
      Description: "AWS Glue crawler to crawl yelp checkin data"
      DatabaseName: !Ref DatabaseYelp
      Targets:
        S3Targets:
          - Path: "<s3:://-bucket-pathof-checkin.json/>"   # change the path
      TablePrefix: "Cleancheckindata"
      SchemaChangePolicy:
        UpdateBehaviour: "UPDATE_IN_DATABASE"
        DeleteBehaviour: "LOG"
      Configuration: '{"Version":1.0}'


  Yelpbucket:
    Type: AWS::S3::Bucket
    Properties:
      VersioningConfiguration:
        Status: Enabled
      BucketName: "<yelp-out-data>"
      PublicAccessBlockConfiguration:
        BlockPublicAcls: TRUE
        BlockPublicPolicy: TRUE
        IgnorePublicAcls: TRUE
        RestrictPublicBuckets: TRUE



  WorkflowJob:
    Type: AWS::Glue::Job
    Properties:
      Role: "LabRole"
      Command:
        Name: glue-etl
        ScriptLocation: !Sub '<s3://yelp-pathof-gluescript.py>'    # change the path
      AllocatedCapacity: 5 # check this 
      ExecutionProperty:
        MaxConcurrentRuns : 2 #  also check this
      Name: "data-cleaning"
      GlueVersion: 3.0


  WorkflowYelp:
    Type: AWS::Glue::Workflow
    Properties:
      Description: "Create worklow"
      MaxConcurrentRuns: 5  # check this value
      Name: "yelpworkflow"


  WorkflowStartTrigger:
    Type: AWS::Glue::Trigger
    Properties:
      Name: 'StartTrigger'
      Type: ON_DEMAND
      Description: "Trigger to start the workflow"
      Actions:
        -JobName: !Ref WorkflowJob
      WorkflowName: !Ref Workflowyelp



  BusinesssJobTrigger:
    Type: AWS::Glue::Trigger
    Properties:
      Name: "BusinesssJobSuccessfulTrigger"
      Type: CONDITIONAL
      StartOnCreation : TRUE
      Description: 'Trigger to start the yelp business crawler'
      Actions:
        - CrawlerName: !Ref CrawlerYelpBusiness
      Predicate:
        Conditions:
          - LogicalOperator: EQUALS
            JobName: !Ref WorkflowJob
            State: SUCCEEDED
      WorkflowName: !Ref WorkflowYelp



  UserJobTrigger:
    Type: AWS::Glue::Trigger
    Properties:

      Name: "UserJobSuccessfulTrigger"
      Type: CONDITIONAL
      StartOnCreation : TRUE
      Description: 'Trigger to start the yelp user crawler'
      Actions:
        - CrawlerName: !Ref CrawlerYelpUser
      Predicate:
        Conditions:
          - LogicalOperator: EQUALS
            JobName: !Ref WorkflowJob
            State: SUCCEEDED
      WorkflowName: !Ref WorkflowYelp


  ReviewsJobTrigger:
    Type: AWS::Glue::Trigger
    Properties:
    
      Name: "ReviewsJobSuccessfulTrigger"
      Type: CONDITIONAL
      StartOnCreation : TRUE
      Description: 'Trigger to start the yelp reviews crawler'
      Actions:
        - CrawlerName: !Ref CrawlerYelpReviews
      Predicate:
        Conditions:
          - LogicalOperator: EQUALS
            JobName: !Ref WorkflowJob
            State: SUCCEEDED
      WorkflowName: !Ref WorkflowYelp


  TipsJobTrigger:
    Type: AWS::Glue::Trigger
    Properties:
    
      Name: "TipsJobSuccessfulTrigger"
      Type: CONDITIONAL
      StartOnCreation : TRUE
      Description: 'Trigger to start the yelp tips crawler'
      Actions:
        - CrawlerName: !Ref CrawlerYelpTips
      Predicate:
        Conditions:
          - LogicalOperator: EQUALS
            JobName: !Ref WorkflowJob
            State: SUCCEEDED
      WorkflowName: !Ref WorkflowYelp



  CheckinJobTrigger:
    Type: AWS::Glue::Trigger
    Properties:
    
      Name: "CheckinJobSuccessfulTrigger"
      Type: CONDITIONAL
      StartOnCreation : TRUE
      Description: 'Trigger to start the yelp checkin crawler'
      Actions:
        - CrawlerName: !Ref CrawlerYelpCheckin
      Predicate:
        Conditions:
          - LogicalOperator: EQUALS
            JobName: !Ref WorkflowJob
            State: SUCCEEDED
      WorkflowName: !Ref WorkflowYelp


  WorkflowLambda:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile: |
          import json
          import boto3

          def lambda_handler(event, context):
              glue = boto3.client("glue")
              response = glue.start_workflow_run(Name="yelpworkflow")
              print(response)
              return {
                  'statusCode' : 200,
                  'body' : json.dumps("Hello from  AWS Lambda!")
              }

      Handler: index.lambda_handler
      Role: "arn:aws:iam::742240590358:role/LabRole"   # Different for everyone, Change the arn
      Runtime: python3.8
      FunctionName: 'LambdaforWorkflow'

  
  LambdaInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref WorkflowLambda
      Action: Lambda:InvokeFunction
      Principal: "s3.amazonaws.com"
      SourceAccount: !Ref AWS::AccountId
      SourceArn: !Sub arn:aws:s3:::bigdata-project-1      # Change the Arn 

